//class boardGame
import java.util.Scanner;//allows for user input and system.in

public class boardGame {
	
	private char x;//for the boardGame constructor
	private char o;
	char[][] twoDArray;//declaring the 2dArray
	final int ROW=3;//number of rows
	final int COL=3; //number of columns
	
	
  Scanner input=new Scanner(System.in);//allows for use of input.nextint
	
	public boardGame(char X,char O) {
		x=X;
		o=O;
		
		twoDArray=new char [ROW][COL];//from hint for the 2d array
		for (int row=0;row<ROW;++row) {
			for (int col=0;col<COL;++col) {
				twoDArray[row][col]=' ';
			}
		
		}
	}
	public boolean catsGame() {//if X player does win and O player does win and the index is blank then return false
		if(checkWinX()&&checkWinO()&&checkBlank()){//if check winO is true and check win X is true and the index is blank then return false
		return false;
		}
		
		return true;//otherwise returns true
	}
	
	public boolean checkBlank() {//checks to see if there is a blank
		if (twoDArray[0][0]==twoDArray[0][1]&&twoDArray[0][1]==twoDArray[0][2]&& twoDArray[0][2]==twoDArray[1][0]&&twoDArray[1][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[1][2]&&twoDArray[1][2]==twoDArray[2][0]&&twoDArray[2][0]==twoDArray[2][1]&&twoDArray[2][1]==twoDArray[2][2] &&twoDArray[0][0]==' ') {
			return true;
		}
		return false;
		
	}
	
	public boolean checkWinX() {//checks to see if X player won the game
		if(twoDArray[0][0]==twoDArray[0][1]&&twoDArray[0][1]==twoDArray[0][2]&& twoDArray[0][0]=='x'){
		return true;
		
		}else if(twoDArray[1][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[1][2]&& twoDArray[1][0]=='x') {
			return true;
		
		}else if (twoDArray[2][0]==twoDArray[2][1]&&twoDArray[2][1]==twoDArray[2][2]&& twoDArray[2][0]=='x') {
			return true;
		
		}else if (twoDArray[0][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[2][2]&& twoDArray[0][0]=='x') {
		return true;
		
		}else if (twoDArray[2][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[0][2]&& twoDArray[2][0]=='x') {
		return true;
		
		}else if(twoDArray[0][0]==twoDArray[1][0]&&twoDArray[1][0]==twoDArray[2][0]&& twoDArray[0][0]=='x') {
			return true;
			
		}else if(twoDArray[0][1]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[2][1]&& twoDArray[0][1]=='x') {
			return true;
		
		}else if(twoDArray[0][2]==twoDArray[1][2]&&twoDArray[1][2]==twoDArray[2][2]&& twoDArray[0][2]=='x') {
		return true;
	}
		
		return false;
	}
	
	public boolean checkWinO() {//checks to see if O player won the game
		if(twoDArray[0][0]==twoDArray[0][1]&&twoDArray[0][1]==twoDArray[0][2]&& twoDArray[0][0]=='o'){
		return true;//checks the first row 0
		
		}else if(twoDArray[1][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[1][2]&& twoDArray[1][0]=='o') {
			return true;//checks the second row 1
		
		}else if (twoDArray[2][0]==twoDArray[2][1]&&twoDArray[2][1]==twoDArray[2][2]&& twoDArray[2][0]=='o') {
			return true;//checks the third row 2
		
		}else if (twoDArray[0][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[2][2]&& twoDArray[0][0]=='o') {
		return true;//check diagonally starting from top left and going to bottom right
		
		}else if (twoDArray[2][0]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[0][2]&& twoDArray[2][0]=='o') {
		return true;//checks diagonally starting from left going to top right
		
		}else if(twoDArray[0][0]==twoDArray[1][0]&&twoDArray[1][0]==twoDArray[2][0]&& twoDArray[0][0]=='o') {
			return true;//checks row 0
			
		}else if(twoDArray[0][1]==twoDArray[1][1]&&twoDArray[1][1]==twoDArray[2][1]&& twoDArray[0][1]=='o') {
			return true;//checks row 1
		
		}else if(twoDArray[0][2]==twoDArray[1][2]&&twoDArray[1][2]==twoDArray[2][2]&& twoDArray[0][2]=='o') {
		return true;//checks row 2
	}
		
		return false;
	}
	
	
	public void askMoveO() {//asks for user input about in which index the O should go
		//temporary variables
	int tempr;
	int tempc;
	
	System.out.println("Which Row would you like?");
	tempr=input.nextInt();//input for row
	
	System.out.println("Which Column would you like?");
	tempc=input.nextInt();//input for column
	
	if (twoDArray[tempr][tempc]==' ') {//if space is blank then insert o into display graph
		twoDArray[tempr][tempc]='o';
		
		
}else {
	System.out.println("Illegal Move");
	askMoveO();
}
	
}
	
	public void askMoveX() {//asks for user input about in which index the X should go
		//temporary variables
		int tempr;
		int tempc;
		
		System.out.println("Which Row would you like?");
		tempr=input.nextInt();//user input for row
		
		System.out.println("Which Column would you like?");
		tempc=input.nextInt();//user input for column
		
		if (twoDArray[tempr][tempc]==' ') {//if the space is blank then insert the char x
			twoDArray[tempr][tempc]='x';
			
			
	}else {
		System.out.println("Illegal Move");//if there is already a char there  then print illegal move and ask them to input move again 
		//calls function again if there is no blank
		askMoveX();
	}
		
	}
	public void displayGraph() {//will display the graph after each input
		for (char oneD[]:twoDArray) {
			for(char element:oneD) {
				System.out.print("|"+element+"|");
			}
			System.out.println();
			System.out.println("---------");
		}
		}
}
